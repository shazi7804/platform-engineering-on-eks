import { Logger } from 'winston';
import { KubernetesRequestBody, KubernetesRequestAuth } from '@backstage/plugin-kubernetes-common';
import { Config } from '@backstage/config';
import * as k8sTypes from '@backstage/plugin-kubernetes-node';
import { KubernetesClustersSupplier as KubernetesClustersSupplier$1, KubernetesObjectsProvider as KubernetesObjectsProvider$1 } from '@backstage/plugin-kubernetes-node';
import { TokenCredential } from '@azure/identity';
import { CatalogApi } from '@backstage/catalog-client';
import { PermissionEvaluator } from '@backstage/plugin-permission-common';
import express from 'express';
import { Duration } from 'luxon';
import { RequestHandler } from 'http-proxy-middleware';
import { PluginEndpointDiscovery } from '@backstage/backend-common';

/**
 *
 * @public
 */
type ServiceLocatorMethod = 'multiTenant' | 'singleTenant' | 'http';
/**
 *
 * @public
 */
interface KubernetesObjectsProviderOptions {
    logger: Logger;
    config: Config;
    fetcher: k8sTypes.KubernetesFetcher;
    serviceLocator: k8sTypes.KubernetesServiceLocator;
    customResources: k8sTypes.CustomResource[];
    objectTypesToFetch?: k8sTypes.ObjectToFetch[];
}
/**
 *
 * @public
 */
type ObjectsByEntityRequest = KubernetesRequestBody;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type KubernetesObjectsProvider = k8sTypes.KubernetesObjectsProvider;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type CustomResourcesByEntity = k8sTypes.CustomResourcesByEntity;
/**
 * @public
 * @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type AuthMetadata = k8sTypes.AuthMetadata;
/**
 * @public
 * @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type ClusterDetails = k8sTypes.ClusterDetails;
/**
 * @public
 * @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type KubernetesClustersSupplier = k8sTypes.KubernetesClustersSupplier;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type KubernetesObjectTypes = k8sTypes.KubernetesObjectTypes;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type ObjectToFetch = k8sTypes.ObjectToFetch;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type CustomResource = k8sTypes.CustomResource;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type ObjectFetchParams = k8sTypes.ObjectFetchParams;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type FetchResponseWrapper = k8sTypes.FetchResponseWrapper;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type KubernetesFetcher = k8sTypes.KubernetesFetcher;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type ServiceLocatorRequestContext = k8sTypes.ServiceLocatorRequestContext;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type KubernetesServiceLocator = k8sTypes.KubernetesServiceLocator;

/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type AuthenticationStrategy = k8sTypes.AuthenticationStrategy;
/**
 * @public @deprecated Import it from \@backstage/plugin-kubernetes-node instead
 */
type KubernetesCredential = k8sTypes.KubernetesCredential;

/**
 *
 * @public
 */
declare class AksStrategy implements AuthenticationStrategy {
    getCredential(_: ClusterDetails, requestAuth: KubernetesRequestAuth): Promise<KubernetesCredential>;
    validateCluster(): Error[];
}

/**
 *
 * @public
 */
declare class AnonymousStrategy implements AuthenticationStrategy {
    getCredential(): Promise<KubernetesCredential>;
    validateCluster(): Error[];
}

/**
 *
 * @public
 */
type SigningCreds = {
    accessKeyId: string | undefined;
    secretAccessKey: string | undefined;
    sessionToken: string | undefined;
};
/**
 *
 * @public
 */
declare class AwsIamStrategy implements AuthenticationStrategy {
    private readonly credsManager;
    constructor(opts: {
        config: Config;
    });
    getCredential(clusterDetails: ClusterDetails): Promise<KubernetesCredential>;
    validateCluster(): Error[];
    private getBearerToken;
}

/**
 *
 * @public
 */
declare class AzureIdentityStrategy implements AuthenticationStrategy {
    private readonly logger;
    private readonly tokenCredential;
    private accessToken;
    private newTokenPromise;
    constructor(logger: Logger, tokenCredential?: TokenCredential);
    getCredential(): Promise<KubernetesCredential>;
    validateCluster(): Error[];
    private fetchNewToken;
    private tokenRequiresRefresh;
    private tokenExpired;
}

/**
 *
 * @public
 */
declare class GoogleStrategy implements AuthenticationStrategy {
    getCredential(_: ClusterDetails, requestAuth: KubernetesRequestAuth): Promise<KubernetesCredential>;
    validateCluster(): Error[];
}

/**
 *
 * @public
 */
declare class GoogleServiceAccountStrategy implements AuthenticationStrategy {
    getCredential(): Promise<KubernetesCredential>;
    validateCluster(): Error[];
}

/**
 *
 * @public
 */
type DispatchStrategyOptions = {
    authStrategyMap: {
        [key: string]: AuthenticationStrategy;
    };
};
/**
 * used to direct a KubernetesAuthProvider to its corresponding AuthenticationStrategy
 * @public
 */
declare class DispatchStrategy implements AuthenticationStrategy {
    private readonly strategyMap;
    constructor(options: DispatchStrategyOptions);
    getCredential(clusterDetails: ClusterDetails, auth: KubernetesRequestAuth): Promise<KubernetesCredential>;
    validateCluster(authMetadata: AuthMetadata): Error[];
}

/**
 *
 * @public
 */
declare class ServiceAccountStrategy implements AuthenticationStrategy {
    getCredential(clusterDetails: ClusterDetails): Promise<KubernetesCredential>;
    validateCluster(): Error[];
}

/**
 *
 * @public
 */
declare class OidcStrategy implements AuthenticationStrategy {
    getCredential(clusterDetails: ClusterDetails, authConfig: KubernetesRequestAuth): Promise<KubernetesCredential>;
    validateCluster(authMetadata: AuthMetadata): Error[];
}

/**
 * The header that is used to specify the cluster name.
 *
 * @public
 */
declare const HEADER_KUBERNETES_CLUSTER: string;
/**
 * The header that is used to specify the Authentication Authorities token.
 * e.x if using the google auth provider as your authentication authority then this field would be the google provided bearer token.
 * @public
 */
declare const HEADER_KUBERNETES_AUTH: string;
/**
 * The options object expected to be passed as a parameter to KubernetesProxy.createRequestHandler().
 *
 * @public
 */
type KubernetesProxyCreateRequestHandlerOptions = {
    permissionApi: PermissionEvaluator;
};
/**
 * Options accepted as a parameter by the KubernetesProxy
 *
 * @public
 */
type KubernetesProxyOptions = {
    logger: Logger;
    clusterSupplier: KubernetesClustersSupplier;
    authStrategy: AuthenticationStrategy;
};
/**
 * A proxy that routes requests to the Kubernetes API.
 *
 * @public
 */
declare class KubernetesProxy {
    private readonly middlewareForClusterName;
    private readonly logger;
    private readonly clusterSupplier;
    private readonly authStrategy;
    constructor(options: KubernetesProxyOptions);
    createRequestHandler(options: KubernetesProxyCreateRequestHandlerOptions): RequestHandler;
    private getMiddleware;
    private getClusterForRequest;
    private static authHeadersToKubernetesRequestAuth;
    private static headerToDictionary;
    private static combineHeaders;
}

/**
 *
 * @public
 */
interface KubernetesEnvironment {
    logger: Logger;
    config: Config;
    catalogApi: CatalogApi;
    permissions: PermissionEvaluator;
}
/**
 * The return type of the `KubernetesBuilder.build` method
 *
 * @public
 */
type KubernetesBuilderReturn = Promise<{
    router: express.Router;
    clusterSupplier: KubernetesClustersSupplier$1;
    customResources: CustomResource[];
    fetcher: KubernetesFetcher;
    proxy: KubernetesProxy;
    objectsProvider: KubernetesObjectsProvider$1;
    serviceLocator: KubernetesServiceLocator;
    authStrategyMap: {
        [key: string]: AuthenticationStrategy;
    };
}>;
/**
 *
 * @public
 */
declare class KubernetesBuilder {
    protected readonly env: KubernetesEnvironment;
    private clusterSupplier?;
    private defaultClusterRefreshInterval;
    private objectsProvider?;
    private fetcher?;
    private serviceLocator?;
    private proxy?;
    private authStrategyMap?;
    static createBuilder(env: KubernetesEnvironment): KubernetesBuilder;
    constructor(env: KubernetesEnvironment);
    build(): KubernetesBuilderReturn;
    setClusterSupplier(clusterSupplier?: KubernetesClustersSupplier$1): this;
    setDefaultClusterRefreshInterval(refreshInterval: Duration): this;
    setObjectsProvider(objectsProvider?: KubernetesObjectsProvider$1): this;
    setFetcher(fetcher?: KubernetesFetcher): this;
    setServiceLocator(serviceLocator?: KubernetesServiceLocator): this;
    setProxy(proxy?: KubernetesProxy): this;
    setAuthStrategyMap(authStrategyMap: {
        [key: string]: AuthenticationStrategy;
    }): void;
    addAuthStrategy(key: string, strategy: AuthenticationStrategy): this;
    protected buildCustomResources(): k8sTypes.CustomResource[];
    protected buildClusterSupplier(refreshInterval: Duration): KubernetesClustersSupplier$1;
    protected buildObjectsProvider(options: KubernetesObjectsProviderOptions): KubernetesObjectsProvider$1;
    protected buildFetcher(): KubernetesFetcher;
    protected buildServiceLocator(method: ServiceLocatorMethod, clusterSupplier: KubernetesClustersSupplier$1): KubernetesServiceLocator;
    protected buildMultiTenantServiceLocator(clusterSupplier: KubernetesClustersSupplier$1): KubernetesServiceLocator;
    protected buildSingleTenantServiceLocator(clusterSupplier: KubernetesClustersSupplier$1): KubernetesServiceLocator;
    protected buildHttpServiceLocator(_clusterSupplier: KubernetesClustersSupplier$1): KubernetesServiceLocator;
    protected buildProxy(logger: Logger, clusterSupplier: KubernetesClustersSupplier$1): KubernetesProxy;
    protected buildRouter(objectsProvider: KubernetesObjectsProvider$1, clusterSupplier: KubernetesClustersSupplier$1, catalogApi: CatalogApi, proxy: KubernetesProxy, permissionApi: PermissionEvaluator): express.Router;
    protected buildAuthStrategyMap(): {
        [key: string]: k8sTypes.AuthenticationStrategy;
    };
    protected fetchClusterDetails(clusterSupplier: KubernetesClustersSupplier$1): Promise<k8sTypes.ClusterDetails[]>;
    protected getServiceLocatorMethod(): ServiceLocatorMethod;
    protected getFetcher(): KubernetesFetcher;
    protected getClusterSupplier(): KubernetesClustersSupplier$1;
    protected getServiceLocator(): KubernetesServiceLocator;
    protected getObjectsProvider(options: KubernetesObjectsProviderOptions): KubernetesObjectsProvider$1;
    protected getObjectTypesToFetch(): k8sTypes.ObjectToFetch[] | undefined;
    protected getProxy(logger: Logger, clusterSupplier: KubernetesClustersSupplier$1): KubernetesProxy;
    protected getAuthStrategyMap(): {
        [key: string]: k8sTypes.AuthenticationStrategy;
    };
}

/**
 *
 * @public
 */
declare const DEFAULT_OBJECTS: ObjectToFetch[];

/**
 *
 * @public
 */
interface RouterOptions {
    logger: Logger;
    config: Config;
    catalogApi: CatalogApi;
    clusterSupplier?: KubernetesClustersSupplier;
    discovery: PluginEndpointDiscovery;
    permissions: PermissionEvaluator;
}
/**
 * creates and configure a new router for handling the kubernetes backend APIs
 * @param options - specifies the options required by this plugin
 * @returns a new router
 * @deprecated Please use the new KubernetesBuilder instead like this
 * ```
 * import { KubernetesBuilder } from '@backstage/plugin-kubernetes-backend';
 * const { router } = await KubernetesBuilder.createBuilder({
 *   logger,
 *   config,
 * }).build();
 * ```
 *
 * @public
 */
declare function createRouter(options: RouterOptions): Promise<express.Router>;

export { AksStrategy, AnonymousStrategy, AuthMetadata, AuthenticationStrategy, AwsIamStrategy, AzureIdentityStrategy, ClusterDetails, CustomResource, CustomResourcesByEntity, DEFAULT_OBJECTS, DispatchStrategy, DispatchStrategyOptions, FetchResponseWrapper, GoogleServiceAccountStrategy, GoogleStrategy, HEADER_KUBERNETES_AUTH, HEADER_KUBERNETES_CLUSTER, KubernetesBuilder, KubernetesBuilderReturn, KubernetesClustersSupplier, KubernetesCredential, KubernetesEnvironment, KubernetesFetcher, KubernetesObjectTypes, KubernetesObjectsProvider, KubernetesObjectsProviderOptions, KubernetesProxy, KubernetesProxyCreateRequestHandlerOptions, KubernetesProxyOptions, KubernetesServiceLocator, ObjectFetchParams, ObjectToFetch, ObjectsByEntityRequest, OidcStrategy, RouterOptions, ServiceAccountStrategy, ServiceLocatorMethod, ServiceLocatorRequestContext, SigningCreds, createRouter };
