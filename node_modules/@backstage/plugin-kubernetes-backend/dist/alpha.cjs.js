'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendCommon = require('@backstage/backend-common');
var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha = require('@backstage/plugin-catalog-node/alpha');
var pluginKubernetesBackend = require('@backstage/plugin-kubernetes-backend');
var pluginKubernetesNode = require('@backstage/plugin-kubernetes-node');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class ObjectsProvider {
  constructor() {
    __publicField(this, "objectsProvider");
  }
  getObjectsProvider() {
    return this.objectsProvider;
  }
  addObjectsProvider(provider) {
    if (this.objectsProvider) {
      throw new Error(
        "Multiple Kubernetes objects provider is not supported at this time"
      );
    }
    this.objectsProvider = provider;
  }
}
class ClusterSuplier {
  constructor() {
    __publicField(this, "clusterSupplier");
  }
  getClusterSupplier() {
    return this.clusterSupplier;
  }
  addClusterSupplier(clusterSupplier) {
    if (this.clusterSupplier) {
      throw new Error(
        "Multiple Kubernetes Cluster Suppliers is not supported at this time"
      );
    }
    this.clusterSupplier = clusterSupplier;
  }
}
class Fetcher {
  constructor() {
    __publicField(this, "fetcher");
  }
  getFetcher() {
    return this.fetcher;
  }
  addFetcher(fetcher) {
    if (this.fetcher) {
      throw new Error(
        "Multiple Kubernetes Fetchers is not supported at this time"
      );
    }
    this.fetcher = fetcher;
  }
}
class ServiceLocator {
  constructor() {
    __publicField(this, "serviceLocator");
  }
  getServiceLocator() {
    return this.serviceLocator;
  }
  addServiceLocator(serviceLocator) {
    if (this.serviceLocator) {
      throw new Error(
        "Multiple Kubernetes Service Locators is not supported at this time"
      );
    }
    this.serviceLocator = serviceLocator;
  }
}
class AuthStrategy {
  constructor() {
    __publicField(this, "authStrategies");
    this.authStrategies = new Array();
  }
  static addAuthStrategiesFromArray(authStrategies, builder) {
    authStrategies.forEach((st) => builder.addAuthStrategy(st.key, st.strategy));
  }
  getAuthenticationStrategies() {
    return this.authStrategies;
  }
  addAuthStrategy(key, authStrategy) {
    this.authStrategies.push({ key, strategy: authStrategy });
  }
}
const kubernetesPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "kubernetes",
  register(env) {
    const extPointObjectsProvider = new ObjectsProvider();
    const extPointClusterSuplier = new ClusterSuplier();
    const extPointAuthStrategy = new AuthStrategy();
    const extPointFetcher = new Fetcher();
    const extPointServiceLocator = new ServiceLocator();
    env.registerExtensionPoint(
      pluginKubernetesNode.kubernetesObjectsProviderExtensionPoint,
      extPointObjectsProvider
    );
    env.registerExtensionPoint(
      pluginKubernetesNode.kubernetesClusterSupplierExtensionPoint,
      extPointClusterSuplier
    );
    env.registerExtensionPoint(
      pluginKubernetesNode.kubernetesAuthStrategyExtensionPoint,
      extPointAuthStrategy
    );
    env.registerExtensionPoint(
      pluginKubernetesNode.kubernetesFetcherExtensionPoint,
      extPointFetcher
    );
    env.registerExtensionPoint(
      pluginKubernetesNode.kubernetesServiceLocatorExtensionPoint,
      extPointServiceLocator
    );
    env.registerInit({
      deps: {
        http: backendPluginApi.coreServices.httpRouter,
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        catalogApi: alpha.catalogServiceRef,
        permissions: backendPluginApi.coreServices.permissions
      },
      async init({ http, logger, config, catalogApi, permissions }) {
        const winstonLogger = backendCommon.loggerToWinstonLogger(logger);
        const builder = pluginKubernetesBackend.KubernetesBuilder.createBuilder({
          logger: winstonLogger,
          config,
          catalogApi,
          permissions
        }).setObjectsProvider(extPointObjectsProvider.getObjectsProvider()).setClusterSupplier(extPointClusterSuplier.getClusterSupplier()).setFetcher(extPointFetcher.getFetcher()).setServiceLocator(extPointServiceLocator.getServiceLocator());
        AuthStrategy.addAuthStrategiesFromArray(
          extPointAuthStrategy.getAuthenticationStrategies(),
          builder
        );
        const { router } = await builder.build();
        http.use(router);
      }
    });
  }
});

exports["default"] = kubernetesPlugin;
//# sourceMappingURL=alpha.cjs.js.map
